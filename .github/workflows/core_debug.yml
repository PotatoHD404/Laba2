name: CMake Debug

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  [ push, pull_request ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Install dependencies
        run: sudo apt-get install -y libgtest-dev valgrind lcov

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake ${{github.workspace}}/core/src -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build tests
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE --target Tests

      - name: Test
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: /usr/bin/valgrind --tool=memcheck --gen-suppressions=all --leak-check=full --leak-resolution=med --track-origins=yes --vgdb=no ${{github.workspace}}/build/Tests/Tests --gtest_repeat=1 --gtest_color=no

      - name: Build main
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE --target Laba2

      - name: Generate code coverage reports
        working-directory: ${{github.workspace}}/build/Tests/CMakeFiles/Tests.dir
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
#        run: gcov --xml main.gcno
        run: |
          lcov --directory . --capture --output-file coverage.info &&\
          lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info &&\
          lcov --list coverage.info
#          bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
      - name: Publish to coveralls.io
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ github.token }}


#  - lcov --directory . --capture --output-file coverage.info
#  # filter out system and extra files.
#  # To also not include test code in coverage add them with full path to the patterns: '*/tests/*'
#  - lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
#  # output coverage data for debugging (optional)
#  - lcov --list coverage.info
#  # Uploading to CodeCov
#  # '-f' specifies file(s) to use and disables manual coverage gathering and file search which has already been done above
#  - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"

#      - uses: codecov/codecov-action@v1
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
#          files: ./coverage1.xml,./coverage2.xml # optional
#          flags: gtest, gcc # optional
#          name: codecov-umbrella # optional
#          fail_ci_if_error: true # optional (default = false)
#          verbose: true # optional (default = false)


